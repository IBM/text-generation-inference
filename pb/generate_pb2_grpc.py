# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import generate_pb2 as generate__pb2


class TextGenerationServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.ServiceDiscovery = channel.unary_unary(
                '/generate.v1.TextGenerationService/ServiceDiscovery',
                request_serializer=generate__pb2.ServiceDiscoveryRequest.SerializeToString,
                response_deserializer=generate__pb2.ServiceDiscoveryResponse.FromString,
                )
        self.ClearCache = channel.unary_unary(
                '/generate.v1.TextGenerationService/ClearCache',
                request_serializer=generate__pb2.ClearCacheRequest.SerializeToString,
                response_deserializer=generate__pb2.ClearCacheResponse.FromString,
                )
        self.ModelInfo = channel.unary_unary(
                '/generate.v1.TextGenerationService/ModelInfo',
                request_serializer=generate__pb2.ModelInfoRequest.SerializeToString,
                response_deserializer=generate__pb2.ModelInfoResponse.FromString,
                )
        self.Prefill = channel.unary_unary(
                '/generate.v1.TextGenerationService/Prefill',
                request_serializer=generate__pb2.PrefillRequest.SerializeToString,
                response_deserializer=generate__pb2.PrefillResponse.FromString,
                )
        self.NextToken = channel.unary_unary(
                '/generate.v1.TextGenerationService/NextToken',
                request_serializer=generate__pb2.NextTokenRequest.SerializeToString,
                response_deserializer=generate__pb2.NextTokenResponse.FromString,
                )
        self.PruneBatch = channel.unary_unary(
                '/generate.v1.TextGenerationService/PruneBatch',
                request_serializer=generate__pb2.PruneBatchRequest.SerializeToString,
                response_deserializer=generate__pb2.PruneBatchResponse.FromString,
                )
        self.PrefixLookup = channel.unary_unary(
                '/generate.v1.TextGenerationService/PrefixLookup',
                request_serializer=generate__pb2.PrefixLookupRequest.SerializeToString,
                response_deserializer=generate__pb2.PrefixLookupResponse.FromString,
                )
        self.Health = channel.unary_unary(
                '/generate.v1.TextGenerationService/Health',
                request_serializer=generate__pb2.HealthRequest.SerializeToString,
                response_deserializer=generate__pb2.HealthResponse.FromString,
                )


class TextGenerationServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def ServiceDiscovery(self, request, context):
        """/ Service discovery
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ClearCache(self, request, context):
        """/ Empties batch cache
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ModelInfo(self, request, context):
        """/ Empties batch cache
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Prefill(self, request, context):
        """/ Prefill batch and generate first token
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def NextToken(self, request, context):
        """/ Generate next token for a list of prefilled batches
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def PruneBatch(self, request, context):
        """/ Prune batch
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def PrefixLookup(self, request, context):
        """/ Lookup prompt prefix
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Health(self, request, context):
        """/ Health check
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_TextGenerationServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'ServiceDiscovery': grpc.unary_unary_rpc_method_handler(
                    servicer.ServiceDiscovery,
                    request_deserializer=generate__pb2.ServiceDiscoveryRequest.FromString,
                    response_serializer=generate__pb2.ServiceDiscoveryResponse.SerializeToString,
            ),
            'ClearCache': grpc.unary_unary_rpc_method_handler(
                    servicer.ClearCache,
                    request_deserializer=generate__pb2.ClearCacheRequest.FromString,
                    response_serializer=generate__pb2.ClearCacheResponse.SerializeToString,
            ),
            'ModelInfo': grpc.unary_unary_rpc_method_handler(
                    servicer.ModelInfo,
                    request_deserializer=generate__pb2.ModelInfoRequest.FromString,
                    response_serializer=generate__pb2.ModelInfoResponse.SerializeToString,
            ),
            'Prefill': grpc.unary_unary_rpc_method_handler(
                    servicer.Prefill,
                    request_deserializer=generate__pb2.PrefillRequest.FromString,
                    response_serializer=generate__pb2.PrefillResponse.SerializeToString,
            ),
            'NextToken': grpc.unary_unary_rpc_method_handler(
                    servicer.NextToken,
                    request_deserializer=generate__pb2.NextTokenRequest.FromString,
                    response_serializer=generate__pb2.NextTokenResponse.SerializeToString,
            ),
            'PruneBatch': grpc.unary_unary_rpc_method_handler(
                    servicer.PruneBatch,
                    request_deserializer=generate__pb2.PruneBatchRequest.FromString,
                    response_serializer=generate__pb2.PruneBatchResponse.SerializeToString,
            ),
            'PrefixLookup': grpc.unary_unary_rpc_method_handler(
                    servicer.PrefixLookup,
                    request_deserializer=generate__pb2.PrefixLookupRequest.FromString,
                    response_serializer=generate__pb2.PrefixLookupResponse.SerializeToString,
            ),
            'Health': grpc.unary_unary_rpc_method_handler(
                    servicer.Health,
                    request_deserializer=generate__pb2.HealthRequest.FromString,
                    response_serializer=generate__pb2.HealthResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'generate.v1.TextGenerationService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class TextGenerationService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def ServiceDiscovery(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/generate.v1.TextGenerationService/ServiceDiscovery',
            generate__pb2.ServiceDiscoveryRequest.SerializeToString,
            generate__pb2.ServiceDiscoveryResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ClearCache(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/generate.v1.TextGenerationService/ClearCache',
            generate__pb2.ClearCacheRequest.SerializeToString,
            generate__pb2.ClearCacheResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ModelInfo(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/generate.v1.TextGenerationService/ModelInfo',
            generate__pb2.ModelInfoRequest.SerializeToString,
            generate__pb2.ModelInfoResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Prefill(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/generate.v1.TextGenerationService/Prefill',
            generate__pb2.PrefillRequest.SerializeToString,
            generate__pb2.PrefillResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def NextToken(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/generate.v1.TextGenerationService/NextToken',
            generate__pb2.NextTokenRequest.SerializeToString,
            generate__pb2.NextTokenResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def PruneBatch(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/generate.v1.TextGenerationService/PruneBatch',
            generate__pb2.PruneBatchRequest.SerializeToString,
            generate__pb2.PruneBatchResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def PrefixLookup(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/generate.v1.TextGenerationService/PrefixLookup',
            generate__pb2.PrefixLookupRequest.SerializeToString,
            generate__pb2.PrefixLookupResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Health(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/generate.v1.TextGenerationService/Health',
            generate__pb2.HealthRequest.SerializeToString,
            generate__pb2.HealthResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
